# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-08 17:41
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.auth.models import User
# from django.conf import settings
from datetime import datetime
import csv

def convert_to_datetime(date_string):
    if date_string == '':
        return None
    else:
        return datetime.strptime(date_string,'%d-%b-%Y')

def make_genre_string(genres_present):
    genre_names = ["unknown", "Action", "Adventure", "Animation",
                   "Children's", "Comedy", "Crime", "Documentary",
                   "Drama", "Fantasy", "Film-Noir", "Horror", "Musical",
                   "Mystery", "Romance", "Sci-Fi", "Thriller", "War",
                   "Western"]
    genre_list = []
    for genre_name, present in zip(genre_names,genres_present):
        if present:
            genre_list.append(genre_name)
    return "|".join(genre_list)

def func(apps, schema_editor):
        Movie = apps.get_model("ratings_app", "Movie")
        Rating = apps.get_model("ratings_app", "Rating")
        Rater = apps.get_model("ratings_app", "Rater")
        # User = apps.get_model("auth", "User")
        with open('../ml-100k/u.item','r',encoding='latin-1') as data_file:
            fields = ["movieId", "title", "release_date",
                      "video_release_date", "imdb_url"]
            reader = csv.DictReader(data_file, delimiter="|", fieldnames=fields, restkey='genres')
            for each_movie in reader:
                mid = each_movie['movieId']
                title = each_movie['title']
                rdate = each_movie['release_date']
                vrdate = each_movie['video_release_date']
                imdb = each_movie['imdb_url']
                rdate = convert_to_datetime(rdate)
                vrdate = convert_to_datetime(vrdate)
                genre_string = make_genre_string(each_movie['genres'])
                try:
                    new_movie = Movie(id=mid, title=title, release_date=rdate, video_release_date=vrdate, imdb_url=imdb, genres=genre_string)
                    new_movie.save()
                except Exception as e:
                    print(each_movie)
                    raise(e)

        with open('../ml-100k/u.user','r') as data_file:
            fields = ["rater_id", "age", "sex", "occupation", "zip_code"]
            reader = csv.DictReader(data_file, delimiter="|", fieldnames=fields)
            for each_user in reader:
                rater_id = each_user['rater_id']
                age = each_user['age']
                sex = each_user['sex']
                occupation = each_user['occupation']
                zip_code = each_user['zip_code']
                new_user = User.objects.create_user(username=occupation+rater_id, password='moviepassword')
                try:
                    new_rater = Rater(id=rater_id, age=age, sex=sex, occupation=occupation, zip_code=zip_code, user_id=new_user.id)
                    new_rater.save()
                except Exception as e:
                    print(each_user)
                    raise e

        with open('../ml-100k/u.data','r') as data_file:
            fields = ["raterId", "movieId", "rating", "timestamp"]
            reader = csv.DictReader(data_file, delimiter="\t", fieldnames=fields)
            for each_rating in reader:
                mid = Movie.objects.get(id=each_rating['movieId'])
                rid = Rater.objects.get(id=each_rating['raterId'])
                rv = each_rating['rating']
                ts = datetime.fromtimestamp(float(each_rating['timestamp']))
                try:
                    new_rating = Rating(movie=mid, rater=rid, rating_value=rv, time=ts)

                except Exception as e:
                    print("Creation")
                    print(each_rating)
                    raise e
                try:
                    new_rating.save()
                except Exception as e:
                    print("Saving")
                    print("Movie:{}-User:{}-Rating:{}".format(new_rating.movie.id, new_rating.rater.id, new_rating.rating_value))
                    raise e

class Migration(migrations.Migration):

    dependencies = [
        ('ratings_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(func)
    ]
